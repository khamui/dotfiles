" If can't find extention of a file, assume it's a C file
autocmd BufNewFile,BufRead * if &syntax == '' | set syntax=c | endif
autocmd BufNewFile,BufRead * if &ft == '' | set ft=c | endif

" ----- colorscheme -----
syntax on
colorscheme quietlight
highlight LineNr ctermfg=253

" ----- arbitrary settings -----

set path=.,**
set re=0
set mouse=a

" ----- path variables -----

let $RTP=split(&runtimepath, ',')[0]
let $RC="$HOME/.config/nvim/init.vim"
let $DEV="~/Documents/Development"
let $LQ="~/Documents/Development/LIQD"
let $GL="~/Documents/Development/JavaScript/github-repos/glance-app"
let $N="~/Documents/Notes/tbfollowup.md"
let $Z="~/.zshrc"

" ----- indentation -----
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set smartindent
set number
set numberwidth=4

" ----- autoformat prettier -----
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

" ----- ruler -----
set ruler
setlocal colorcolumn=80

" Delete characters outside of insert area
set backspace=indent,eol,start

" Disable backups and swap files
set nobackup
set nowritebackup
set noswapfile

" ENABLE search options
set is
set nohls
" set hls

" Set split openings
set splitbelow
set splitright

" SET LEADER (PREFIX)
:let mapleader = ","

" KEYMAPPINGS FOR NAVIGATION
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>so :so $MYVIMRC<cr>
nnoremap H 0
nnoremap L A<esc>

" KEYMAPPINGS FOR SPLITS
nnoremap ¬ :vsp<CR>
nnoremap ∆ :sp<CR>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>

" KEYMAPPINGS
noremap <C-s> :call ShojiToggle()<CR>
noremap! <C-s> <ESC>:call ShojiToggle()<CR>i
nnoremap <C-f> :Files<CR>
nnoremap - ddp
nnoremap _ ddkP
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel
inoremap <c-u> <esc>vawU
inoremap jk <ESC>

" ABBREVIATIONS
:iabbrev calss class
:iabbrev eclass export class {}

" INCLUDE SEARCH
" ^\s*\(import\|require\)\s*\({\)\s*\zs\(\S\+\s\{-}\)

" ----- denite config -----
" Wrap in try/catch to avoid errors on initial install before plugin is available
try
" === Denite setup ==="
" Use ripgrep for searching current directory for files
" By default, ripgrep will respect rules in .gitignore
"   --files: Print each file that would be searched (but don't search)
"   --glob:  Include or exclues files for searching that match the given glob
"            (aka ignore .git files)
"
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])

" Use ripgrep in place of "grep"
call denite#custom#var('grep', 'command', ['rg'])

" Custom options for ripgrep
"   --vimgrep:  Show results with every match on it's own line
"   --hidden:   Search hidden directories and files
"   --heading:  Show the file name above clusters of matches from each file
"   --S:        Search case insensitively if the pattern is all lowercase
call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])

" Recommended defaults for ripgrep via Denite docs
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Remove date from buffer list
call denite#custom#var('buffer', 'date_format', '')
let s:denite_options = {'default' : {
\ 'start_filter': 1,
\ 'auto_resize': 1,
\ 'source_names': 'short',
\ 'prompt': '∆ ',
\ 'highlight_matched_char': 'QuickFixLine',
\ 'highlight_matched_range': 'Visual',
\ 'highlight_window_background': 'Visual',
\ 'highlight_filter_background': 'DiffAdd',
\ 'winrow': 1,
\ 'vertical_preview': 1
\ }}

" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)

" ----- denite key mappings -----
"   ;         - Browser currently open buffers
"   <leader>t - Browse list of files in current directory
"   <leader>g - Search current directory for occurences of given term and close window if no results
"   <leader>j - Search current directory for occurences of word under cursor
nmap ; :Denite buffer<CR>
nmap <leader>t :DeniteProjectDir file/rec<CR>
nnoremap <leader>g :<C-u>Denite grep:. -no-empty<CR>
nnoremap <leader>j :<C-u>DeniteCursorWord grep:.<CR>

" Define mappings while in 'filter' mode
"   <C-o>         - Switch to normal mode inside of search results
"   <Esc>         - Exit denite window in any mode
"   <CR>          - Open currently selected file in any mode
"   <C-t>         - Open currently selected file in a new tab
"   <C-v>         - Open currently selected file a vertical split
"   <C-h>         - Open currently selected file in a horizontal split
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> jk
  \ <Plug>(denite_filter_update)
  inoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  inoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  inoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  inoremap <silent><buffer><expr> ¬
  \ denite#do_map('do_action', 'vsplit')
  inoremap <silent><buffer><expr> ∆
  \ denite#do_map('do_action', 'split')
endfunction

" Define mappings while in denite window
"   <CR>        - Opens currently selected file
"   q or <Esc>  - Quit Denite window
"   d           - Delete currenly selected file
"   p           - Preview currently selected file
"   <C-o> or i  - Switch to insert mode inside of filter prompt
"   <C-t>       - Open currently selected file in a new tab
"   <C-v>       - Open currently selected file a vertical split
"   <C-h>       - Open currently selected file in a horizontal split
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-o>
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> ¬
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> ∆
  \ denite#do_map('do_action', 'split')
endfunction
catch
  echo 'Denite not installed. Run :PlugInstall'
endtry
